//GRAMMAR

file -> newlines_0 statement_list newlines_0
statement_list -> statement
statement_list -> statement newlines_1 statement_list

statement -> directive
statement -> labeled_statement
statement -> instruction

directive -> DOT ID atom_list
labeled_statement -> label_list newlines_0 statement
label_list -> label
label_list -> label newlines_0 label_list
label -> ID COLON
instruction -> atom_list

atom -> ID | number
atom_list -> atom
atom_list -> atom atom_list


number -> NUM | HEXNUM | BINNUM

//can have a newline chain 0 or more or 1 or more
newlines_0 ->
newlines_0 -> NEWLINE
newlines_0 -> NEWLINE newlines_0
newlines_1 -> NEWLINE
newlines_1 -> NEWLINE newlines_1

//LEXER
//for num, the prefix informs how the rest of the token is parsed
HEXNUM -> 0x[0-9A-Fa-f]+
BINNUM -> 0b[01]+
NUM -> [0-9]+
ID -> [a-zA-Z_][a-zA-Z_0-9]*
DOT -> .
COLON -> :
LBRACK -> [
RBRACK -> ]
NEWLINE -> \n
